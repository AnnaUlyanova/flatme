exports[`test Join renders correctly 1`] = `
<Connect(Form)
  model="forms.join"
  onSubmit={[Function]}
  validators={
    Object {
      "": Object {
        "passwordMatch": [Function],
      },
    }
  }>
  <div
    className="four columns">
    <label>
      First name:
    </label>
    <Component
      model=".firstName"
      validators={
        Object {
          "maxLength": [Function],
          "required": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "maxLength": " Must be 15 characters or less",
          "required": "Required",
        }
      }
      model="forms.join.firstName"
      show="touched" />
  </div>
  <div
    className="four columns">
    <label>
      Last name:
    </label>
    <Component
      model=".lastName"
      validators={
        Object {
          "maxLength": [Function],
          "required": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "maxLength": " Must be 15 characters or less",
          "required": "Required",
        }
      }
      model="forms.join.lastName"
      show="touched" />
  </div>
  <div
    className="four columns">
    <label>
      Email:
    </label>
    <Component
      model=".email"
      validators={
        Object {
          "required": [Function],
          "validEmail": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "required": "Required",
          "validEmail": " Invalid email address",
        }
      }
      model="forms.join.email"
      show="touched" />
  </div>
  <div
    className="four columns">
    <label>
      Phone Number:
    </label>
    <Component
      model=".phoneNumber"
      validators={
        Object {
          "maxLength": [Function],
          "required": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "maxLength": " Must be 15 characters or less",
          "required": "Required",
        }
      }
      model="forms.join.phoneNumber"
      show="touched" />
  </div>
  <div
    className="four columns">
    <label>
      Password:
    </label>
    <Modeled(Connect(Control))
      model=".password"
      type="password"
      validators={
        Object {
          "maxLength": [Function],
          "required": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "maxLength": " Must be 15 characters or less",
          "required": "Required",
        }
      }
      model="forms.join.password"
      show="touched" />
  </div>
  <div
    className="four columns">
    <label>
      Confirm Password:
    </label>
    <Modeled(Connect(Control))
      model=".confirmPassword"
      type="password"
      validators={
        Object {
          "maxLength": [Function],
          "required": [Function],
        }
      } />
    <Modeled(Connect(Errors))
      className="errors"
      messages={
        Object {
          "maxLength": " Must be 15 characters or less",
          "passwordMatch": "Must match",
          "required": "Required",
        }
      }
      model="forms.join.confirmPassword"
      show="touched" />
  </div>
  <Modeled(Connect(Errors))
    messages={
      Object {
        "passwordMatch": "Password need to match",
      }
    }
    model="forms.join" />
  <button
    type="submit">
    Add
  </button>
</Connect(Form)>
`;
